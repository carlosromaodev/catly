// Gerador do Prisma Client (client JS/TS)
generator client {
  provider = "prisma-client-js"
}

//* Fonte de dados: conexão com o PostgreSQL via variável de ambiente
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ========================= ENUMS =========================
//

//* Enum Disponibilidade: usado para indicar se um produto está disponível ou não.
enum Disponibilidade {
  DISPONIVEL
  INDISPONIVEL
}

//* Enum userStatus: define os status que um usuário pode ter na plataforma.
enum userStatus {
  Explorador
  CriadorDeConteudo
  FornecedorDeServicos
  VendedorDeProdutos
  GestorDeComunidade
}

//* Enum roleEnum: define os papéis (roles) disponíveis no sistema.

enum roleEnum {
  EXPLORADOR
  CRIADOR_DE_CONTEUDO
  INFLUENCIADOR
  ARTISTA
  PRODUTOR_DE_VIDEO
  PODCASTER
  YOUTUBER
  VENDEDOR_DE_PRODUTOS_DIGITAIS
  VENDEDOR_DE_PRODUTOS_FISICOS
  DESIGNER_DIGITAL
  COMEDIANTE
  MUSICO
  MODELO
  INFLUENCIADOR_ADULTO
  MENTOR
  COACH_DE_CARREIRA
  PROFESSOR_PARTICULAR
  CURADOR_DE_CONTEUDO
  GERENTE_DE_ECOMMERCE
  CONSULTOR
  PERSONAL_TRAINER
  
}

//* enum ReportStatus
//* inclui todas as opçoẽs status para reportagens

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum ReportCategory {
  FRAUD
  INAPPROPRIATE_CONTENT
  SPAM
  POOR_SERVICE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum paymentMethod {
  MULTICAIXA_EXPRESS 
  TRANSFERENCIA_BANCARIA
  PAGAMENTO_POR_REFERENCIA
  PAGAMENTO_NA_ENTREGA
  PAGAMENTO_CODIGO_QR
}  

//
// =========================================== MODELOS DE PERMISSÕES ===================================================
//

// *Modelo Role: representa um papel que pode ser atribuído aos usuários.
//* Relaciona-se com o modelo permission via a relação "permissionRole".

model Role {
  id            String        @id @default(cuid())
  name          String
  description   String
  roleUser      roleEnum
  permission    permission[]  @relation("permissionRole")
}

// Modelo permission: define permissões que podem ser associadas a roles.
// Possui name, descrição e estabelece relações com Role e com a tabela associativa Userpermission.
model permission {
  id             String         @id @default(cuid())
  name           String
  description    String
  roles          Role[]         @relation("permissionRole")
  Userpermission Userpermission[]
}

// Modelo Userpermissi       on: tabela associativa que liga usuários a permissões (muitos para muitos).
model Userpermission {
  id            String        @id @default(cuid())
  UserId        String
  permissionId  String
  User          User          @relation(fields: [UserId], references: [id])
  permission    permission    @relation(fields: [permissionId], references: [id])
}

//
// ========================= MODELO DE STATUS DO USUÁRIO =========================
//

// Modelo UserStatus: registra o status atual do usuário (ex.: EXPLORADOR, GUARDIAO, etc.).
model UserStatus {
  id       String      @id @default(cuid())
  UserId   String
  status   userStatus
  CreateIn DateTime    @default(now())
  User     User        @relation(fields: [UserId], references: [id])
}

//
// =============================================== MODELOS PRINCIPAIS ==================================================
//
// Modelo User: representa o usuário principal do sistema.
// Armazena informações básicas e estabelece diversas relações com outros modelos.
model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  phone        String         @unique
  password     String
  CreateIn     DateTime       @default(now())
  updateIn     DateTime       @updatedAt
  adderessid   String?        // Chave para relação com adderess
  
  // Relações:
  afiliacoes   Afiliacao[]
  catalogos    Catalogo[]
  localizacoes Localizacao[]
  merchant     Merchant?   
  adderess     Adderess? 
  permission   Userpermission[]
  status       userStatus         @default(Explorador)
  auditoria    Auditoria[]
  UserStatus   UserStatus[]
  // Relação para quando o usuário é promovido a criador de conteúdo
  criador      Criador?         @relation("UserToCriador")

  Guardiao Guardiao?

  Report  Report[]               @relation("user reporter")

  report Report[]                @relation(name: "ReporterReports")

  PaymentAudit PaymentAudit[]
}

// Modelo Merchant: representa merchantes na plataforma.
// Contém dados comerciais e se relaciona com o modelo User.
model Merchant {
    id              String      @id @default(cuid())
    userId          String      @unique
    businessName    String      @unique // Nome do negócio
    email           String      @unique
    phone           String
    bi              String      @unique // Bilhete de Identidade
    nif             String      @unique // Número de Identificação Fiscal
    description     String      // Descrição do negócio

    // Imagens
    profileImage    String?     // URL da foto de perfil do Merchant
    coverImage      String?     // URL da foto de capa do Merchant

    // Dados Bancários
    bank            String?      // Nome do banco
    ibanOfBank      String?      // IBAN
    numberBank      String?      // Número da conta

    // Redes Sociais e Contato
    instagram       String?
    whatsapp        String?
    facebook        String?
    website         String?
    
    // Localização
    locationId      String?      @unique
    addressId       String?      @unique

    // Horário de Funcionamento
    hoursOfOperation String?     // Exemplo: "Seg-Sex 08:00-18:00, Sáb 09:00-14:00"

    // Status do Merchant
    isVerified      Boolean      @default(false) // Indica se a conta está verificada
    isActive        Boolean      @default(true)  // Se o Merchant ainda está ativo

    // Relações
    user            User?        @relation(fields: [userId], references: [id])
    location        Localizacao? @relation(fields: [locationId], references: [id])
    address         Adderess?
    catalogos       Catalogo[]
    products        Product[]
    afiliacoes      Afiliacao[]
    reports         Report[]    @relation("MerchantReports")
    payments        PaymentAudit[]
    auditoria       Auditoria[]

    // Timestamps
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt


    Branch Branch[]

    ProgramaAfiliados ProgramaAfiliados[]
}


// Modelo Criador: representa usuários que atuam como criadores de conteúdo.
model Criador {
  id           String        @id @default(cuid())
  email        String        @unique
  phone        String
  description  String
  UserId       String        @unique
  CreateIn     DateTime      @default(now())
  updateIn     DateTime      @updatedAt
  birthday     DateTime       
  perfileName  String        @unique
  User         User          @relation("UserToCriador", fields: [UserId], references: [id])
  location     Localizacao?  @relation(fields: [locationid], references: [id])
  locationid   String?
  adderess     Adderess?
   adderessid  String?
  product      Product[]
  program     ProgramaAfiliados[]
  branch      Branch[]

  inscricao   Inscricao[] @relation("UserInscrito")


  Conteudo     Conteudo[]

  PaymentAudit PaymentAudit[]

  Catalogo     Catalogo[]

  Inscricao    Inscricao[] @relation("UserPerfil")
}

// Modelo Guardiao: armazena dados adicionais para usuários promovidos a Guardião,
model Guardiao {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  level       Int       @default(1)  // Define o nível hierárquico do guardião
  description String?   
  CreateIn    DateTime  @default(now())
  updateIn    DateTime  @updatedAt

  Report Report[] @relation(name: "GuardianReports")
}


// ========================= MODELOS DE LOCALIZAÇÃO E ENDEREÇO =========================
//

// Modelo Localizacao: armazena coordenadas geográficas, podendo estar associada a um Merchant ou User.
model Localizacao {
  id          String      @id @default(cuid())
  latitude    Float
  longitude   Float
  merchantId String?  @unique   
 UserId      String?     
  CreateIn    DateTime    @default(now())
  updateIn    DateTime    @updatedAt
  merchant  Merchant? 
  User        User?       @relation(fields: [UserId], references: [id])
  Criador     Criador[]   // Relação com Criador, se necessário
}

// Modelo Filial: representa uma filial de um Merchant.

// Cada filial possui um endereço único, vinculado através do campo adderessId.
model Branch {
  id           String      @id @default(cuid())
  name         String
  adderessId   String      @unique  // Cada filial possui um endereço único
  merchantId String
  CreateIn     DateTime    @default(now())
  updateIn     DateTime    @updatedAt
  merchant   Merchant  @relation(fields: [merchantId], references: [id])
  adderess     Adderess    @relation(fields: [adderessId], references: [id])
  Criador     Criador[]   // Relação com Criador, se necessário
}

// Modelo adderess: armazena os details do endereço.
// Pode estar relacionado a uma filial e a múltiplos usuários.

model Adderess {
  id                String   @id @default(cuid())
  street            String
  city              String
  state             String
  country           String
  description       String

  merchantId     String  @unique 
  creatorId         String  @unique 
  UserId            String  @unique 


 filial            Branch?  // Relação opcional com Filial
  User              User        @relation(fields: [UserId], references: [id])
  Merchant       Merchant @relation(fields: [merchantId], references: [id])
  Criador           Criador     @relation(fields: [creatorId], references: [id])
}

//
// ========================= MODELOS DE CATÁLOGO, PRODUTO, MENU E ITEM =========================
//

// Modelo Catalogo: armazena catálogos criados pelos usuários.
model Catalogo {
  id           String      @id @default(cuid())
  name         String
  description  String
  CreateIn     DateTime    @default(now())
  updateIn     DateTime    @updatedAt
  merchantId       String
  creatorId      String       @unique
  merchant   Merchant        @relation(fields: [merchantId], references: [id])
  creator    Criador        @relation(fields: [creatorId], references: [id])


  menus        Menu[]
  product     Product[]

  User User[]
}

// Modelo Product: representa os product cadastrados nos catálogos.
model Product {
  id               String         @id @default(cuid())
  name             String
  price            Float
  CreateIn         DateTime       @default(now())
  updateIn         DateTime       @updatedAt
  catalogoId       String?        // Relacionamento opcional com Catalogo
  disponibilidade Disponibilidade @default(DISPONIVEL)
  merchantId     String
  quantidade       Int
  catalogo         Catalogo?      @relation(fields: [catalogoId], references: [id])
  merchant       Merchant     @relation(fields: [merchantId], references: [id])
  Criador          Criador[]      // Relação com Criador, se o produto estiver associado a criadores

  Report Report[]
}

// Modelo Menu: representa um menu dentro de um catálogo.
model Menu {
  id           String      @id @default(cuid())
  name         String
  CreateIn     DateTime    @default(now())
  updateIn     DateTime    @updatedAt
  catalogoId   String
  itens        Item[]
  catalogo     Catalogo    @relation(fields: [catalogoId], references: [id])
}

// Modelo Item: representa itens individuais dentro de um menu.
model Item {
  id           String      @id @default(cuid())
  name         String
  price        Float
  menuId       String
  CreateIn     DateTime    @default(now())
  updateIn     DateTime    @updatedAt
  menu         Menu        @relation(fields: [menuId], references: [id])
}

//
// ========================= MODELOS DE AFILIACAO, PROGRAMA, AUDITORIA, CONTEÚDO E INSCRIÇÃO =========================
//

// Modelo Afiliacao: associa um usuário a um programa de afiliados.
model Afiliacao {
  id           String            @id @default(cuid())
  UserId       String
  programaId   String
  CreateIn     DateTime          @default(now())
  updateIn     DateTime          @updatedAt
  programa     ProgramaAfiliados @relation(fields: [programaId], references: [id])
  User         User              @relation(fields: [UserId], references: [id])

  Merchant Merchant[]
}

// Modelo ProgramaAfiliados: representa campanhas de afiliados criadas pelos merchantes.
model ProgramaAfiliados {
  id           String        @id @default(cuid())
  merchantId String
  name         String
  description  String
  comissao     Float
  CreateIn     DateTime      @default(now())
  updateIn     DateTime      @updatedAt
  afiliacoes   Afiliacao[]
  merchant   Merchant    @relation(fields: [merchantId], references: [id])
  Criador      Criador[]     // Relação adicional se product também estiverem vinculados a criadores
}

// Modelo Auditoria: registra ações dos usuários para rastreabilidade e compliance.
model Auditoria {
  id       String   @id @default(cuid())
  UserId   String
  MerchantId String
  action     String
  details String
  CreateIn DateTime @default(now())
  User     User     @relation(fields: [UserId], references: [id])
  Merchant Merchant @relation(fields: [MerchantId], references: [id])
}

// Modelo Report: recebe as denuncias feitas pelos usuarios 
model Report {
  id             String       @id @default(uuid()) // ID único da denúncia
  reporter       User         @relation(name: "ReporterReports", fields: [reporterId], references: [id]) // Usuário que fez a denúncia
  reporterId     String       
  reported       Merchant?    @relation(name: "MerchantReports", fields: [reportedId], references: [id]) // Merchant denunciado
  reportedId     String?      
  product        Product?     @relation(fields: [productId], references: [id]) // Produto denunciado (se aplicável)
  productId      String?      
  category       ReportCategory
  description    String      
  status         ReportStatus @default(PENDING) // Status da denúncia
  guardian       Guardiao?        @relation(name: "GuardianReports", fields: [guardianId], references: [id]) // Guardião/Admin que avalia
  guardianId     String?      
  createdAt      DateTime     @default(now()) // Data da denúncia
  resolvedAt     DateTime?    // Data de resolução
  updatedAt      DateTime     @updatedAt // Data da última atualização
  User User[] @relation("user reporter")
}




// Modelo Conteudo: representa conteúdos (fotos, vídeos) postados por criadores.
// Pode ter preço para acesso exclusivo e permite inscrições de outros usuários.
model Conteudo {
  id           String      @id @default(cuid())
  titulo       String
  description  String
  urlFoto      String?
  urlVideo     String?
  price        Float?
  CreateIn     DateTime    @default(now())
  updateIn     DateTime    @updatedAt
  CriadorId       String
  Criador         Criador        @relation(fields: [CriadorId], references: [id])
  inscritos    Inscricao[]
}

// Modelo Inscricao: associa usuários que se inscrevem em conteúdos ou perfis (similar a OnlyFans).
model Inscricao {
  id         String      @id @default(cuid())
  UserId     String
  perfilId   String
  price       Boolean     @default(false)
  CreateIn   DateTime    @default(now())
  Criador       Criador        @relation("UserInscrito", fields: [UserId], references: [id])
  perfil     Criador        @relation("UserPerfil", fields: [perfilId], references: [id])
  Conteudo   Conteudo[]
}

// ============================= Metodos de pagamentos =================================================================

model PaymentAudit {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  merchant      Merchant   @relation(fields: [merchantId], references: [id])
  creator       Criador       @relation(fields:[creatorId], references: [id])
  creatorId     String
  merchantId    String
  userId        String
  amount        Float
  currency      String   // "AOA", "BRL", "USD"
  paymentMethod paymentMethod
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?
  transactionId String? // ID da transação no sistema de pagamento
  paymentDate   DateTime? // Data do pagamento, se aplicável
  refundDate    DateTime? // Data do reembolso, se aplicável
}